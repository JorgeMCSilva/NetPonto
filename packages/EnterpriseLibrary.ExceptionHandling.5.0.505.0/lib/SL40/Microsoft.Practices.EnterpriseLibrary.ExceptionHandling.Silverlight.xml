<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData">
            <summary>
            Configuration element storing configuration information for the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionCallHandlerData.ExceptionPolicyName">
            <summary>
            The exception policy name as defined in configuration for the Exception Handling Application Block.
            </summary>
            <value>The "exceptionPolicyName" attribute in configuration</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData">
            <summary>
            Represents the configuration for an <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/>.
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.BuildName(System.String)">
            <summary>
            Builds a name with the supplied prefix. 
            </summary>
            <param name="prefix">Prefix to use when building a name</param>
            <returns>A name as string</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.#ctor">
            <summary>
            Initializes an instance of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData.GetRegistrations(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for the exception handler data provided.
            </summary>
            <param name="namePrefix">The prefix to use when building references to child elements.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for the exception handler data</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings">
            <summary>
            Represents the Exception Handling Application Block configuration section in a configuration file.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.SectionName">
            <summary>
            Gets the configuration section name for the library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.GetExceptionHandlingSettings(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/> section in the configuration source.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> to get the section from.</param>
            <returns>The exception handling section.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries to use when configuring a container for Exception Handling
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings.ExceptionPolicies">
            <summary>
            Gets a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/> objects.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData">
            <summary>
            Represents the configuration for an exception policy.
            </summary> 
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.GetRegistration(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Retrieves the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for registering a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> in the container.
            </summary>
            <returns>A completed <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionPolicyData.ExceptionTypes">
            <summary>
            Gets a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> objects.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData">
            <summary>
            Represents the configuration for an <see cref="T:System.Exception"/>
            that will be handled by an exception policy. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.GetRegistration(System.String)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> container configuration model to register <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> items with the container.
            </summary>
            <param name="namePrefix"></param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.Type">
            <summary>
            Gets or sets the <see cref="T:System.Exception"/> type.
            </summary>
            <value>
            The <see cref="T:System.Exception"/> type
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.TypeName">
            <summary>
            Gets or sets the fully qualified type name of the <see cref="T:System.Exception"/> type.
            </summary>
            <value>
            The fully qualified type name of the <see cref="T:System.Exception"/> type.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/> for the exception.
            </summary>
            <value>
            One of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.PostHandlingAction"/> values.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionTypeData.ExceptionHandlers">
            <summary>
            Gets a collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> objects.
            </summary>
            <value>
            A collection of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> objects.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingConfigurationSourceBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder"/> extensions to support creation of exception handling configuration sections.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlingConfigurationSourceBuilderExtensions.ConfigureExceptionHandling(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSourceBuilder)">
            <summary>
            Main entry point to configuration a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings"/> section.
            </summary>
            <param name="configurationSourceBuilder">The builder interface to extend.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName">
            <summary>
            Defines an exception policy with a given name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationGivenPolicyWithName.GivenPolicyWithName(System.String)">
            <summary>
            Defines new policy with a given name.
            </summary>
            <param name="name">Name of policy</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType">
            <summary>
            Fluent interface extensions for configuring an exception type on an exception policy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType.ForExceptionType(System.Type)">
            <summary>
            The <see cref="T:System.Exception"/> handled under the exception policy.
            </summary>
            <param name="exceptionType">The type of <see cref="T:System.Exception"/> handled for this policy.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionType.ForExceptionType``1">
            <summary>
            The <see cref="T:System.Exception"/> handled under the exception policy.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Exception"/> handled for this policy.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers">
            <summary>
            This interface provides the extension point for handlers that provide a fluent configuration interface.
            </summary>
            <remarks>
            Handlers providing a fluent interface should provide extension methods to this interface.
            <example>
             public static class ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions
             {
                public static IExceptionConfigurationReplaceWithProvider ReplaceWith(this IExceptionConfigurationAddExceptionHandlers context, Type replacingExceptionType)
                { }
             }
            </example>
            
            The context implementer offers additional interfaces that are useful in continuing the configuration of Exception Handling (<see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling"/>
            or in adding your custom handler information to the currently building exception type (<see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension"/>). Instead of casting to these
            interfaces directly, consider using the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension"/> as a base class for your custom handler builder.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction">
            <summary>
            This interface supports the fluent configuration of the Exception Handling Application Block.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction.ThenDoNothing">
            <summary>
            End the current exception handling chain by doing nothing more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction.ThenNotifyRethrow">
            <summary>
            End the current exception handling chain by notifying the caller that an exception should be rethrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationThenDoPostHandlingAction.ThenThrowNewException">
            <summary>
            End the current exception handling chain by throwing a new exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling">
            <summary>
            This interface supports the configuration of the Exception Handling Application Block.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension">
            <summary>
            Used to provide context to extensions of the Exception Handling fluent configuration interface.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension.CurrentExceptionTypeData">
            <summary>
            Retrieves data about the currently built up ExceptionTypeData.  Exception handler configuration extensions will use this to 
            add their handler information to the exception.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions"/>
            
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension">
            <summary>
            Provides a base extensible class for handler configuration extensions.  This class eases the handling 
            of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers"/> that is the typical entry point
            for most exception handler's fluent configuration interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Initializes a new instance of the ExceptoinHandlerConfigurationExtensions
            </summary>
            <param name="context">The context for configuration.</param>
            <remarks>
            This constructor expects to the find the implementor of <paramref name="context"/> provide
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationForExceptionTypeOrPostHandling"/> and <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IExceptionHandlerExtension"/> interfaces.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension.Context">
            <summary>
            The context for the extending handler in the fluent interface.  The extension interface
            is expected to return this context to enable continuation of configuring ExceptionHandling.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ExceptionHandlerConfigurationExtension.CurrentExceptionTypeData">
            <summary>
            The current exception type being built in the fluent interface.  Inheritors generally should 
            add their <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlerData"/> to this during construction.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationReplaceWithProvider">
            <summary>
             This interface supports the fluent configuration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage">
            <summary>
            Defines interface for adding messages when configuring a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> for an exception.
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage.UsingMessage(System.String)">
            <summary>
            Use the provided message as part of the new exception.
            </summary>
            <param name="message">Message to use when providing an alternative exception, typically through wrapping or replacing.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWithMessage.UsingResourceMessage(System.Type,System.String)">
            <summary>
            Use the message in the specified resource file and name.
            </summary>
            <param name="resourceType">The type from the assembly with the resource to use for a message</param>
            <param name="resourceName">The name of the resource.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationWrapWithProvider">
            <summary>
             This interface supports the fluent configuration of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions">
            <summary>
            Defines configuration extensions to <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers"/> for <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>
            configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions.ReplaceWith``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Replace exception with new exception type.
            </summary>
            <typeparam name="T">Replacement <see cref="T:System.Exception"/> type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ReplaceWithHandlerLoggingConfigurationSourceBuilderExtensions.ReplaceWith(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.Type)">
            <summary>
            Replace exception with new exception type.
            </summary>
            <param name="context">Interface to extend to add ReplaceWith options.</param>
            <param name="replacingExceptionType">Replacement <see cref="T:System.Exception"/> type.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions">
            <summary>
             Provides <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> configuration extensions to the ExceptionHandling fluent configuration interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions.WrapWith``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers)">
            <summary>
            Wrap exception with the new exception type.
            </summary>
            <typeparam name="T">Type of <see cref="T:System.Exception"/> to wrap existing exception with.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.WrapWithHandlerLoggingConfigurationSourceBuilderExtensions.WrapWith(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.Fluent.IExceptionConfigurationAddExceptionHandlers,System.Type)">
            <summary>
            Wrap exception with the new exception type.
            </summary>
            <param name="context">The extension context for this handler extension.</param>
            <param name="wrappingExceptionType">Type of <see cref="T:System.Exception"/>to wrap existing exception with.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData">
            <summary>
            Represents the configuration data for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.GetRegistrations(System.String)">
            <summary>
            A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> container configuration model for <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/>.
            </summary>
            <param name="namePrefix">The prefix to use when determining references to child elements.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> for registering a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> in the container.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ReplaceExceptionType">
            <summary>
            Gets or sets the type of the replacement exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessage">
            <summary>
            Gets or sets the message for the replacement exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessageResourceName">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ExceptionMessageResourceType">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ReplaceHandlerData.ReplaceExceptionTypeName">
            <summary>
            Gets or sets the fully qualified type name of the replacement exception.
            </summary>
            <value>
            The fully qualified type name of the replacement exception.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData">
            <summary>
            Represents the configuration data for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.GetRegistrations(System.String)">
            <summary>
            Retrieves a container configuration model for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> based on the data in <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/>
            </summary>
            <param name="namePrefix">The name to use when building references to child items.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> to register a <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> in the container</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.WrapExceptionType">
            <summary>
            Gets or sets the type of the replacement exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessage">
            <summary>
            Gets or sets the message for the replacement exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessageResourceType">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.ExceptionMessageResourceName">
            <summary/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.WrapHandlerData.WrapExceptionTypeName">
            <summary>
            Gets or sets the fully qualified type name of the replacement exception.
            </summary>
            <value>
            The fully qualified type name of the replacement exception.
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter">
            <summary>
            Represents the base class from which all implementations of exception formatters must derive. The formatter provides functionality for formatting <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> objects.
            </summary>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.#ctor(System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter"/> class with an <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to format.
            </summary>
            <param name="exception">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> object to format.</param>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Format">
            <summary>
            Formats the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> into the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Formats the exception and all nested inner exceptions.
            </summary>
            <param name="exceptionToFormat">The exception to format.</param>
            <param name="outerException">The outer exception. This 
            value will be null when writing the outer-most exception.</param>
            <remarks>
            <para>This method calls itself recursively until it reaches
            an exception that does not have an inner exception.</para>
            <para>
            This is a template method which calls the following
            methods in order
            <list type="number">
            <item>
            <description><see cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteExceptionType(System.Type)"/></description>
            </item>
            <item>
            <description><see cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteMessage(System.String)"/></description>
            </item>
            <item>
            <description><see cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteReflectionInfo(System.Exception)"/></description>
            </item>
            <item>
            <description><see cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteStackTrace(System.String)"/></description>
            </item>
            <item>
            <description>If the specified exception has an inner exception
            then it makes a recursive call. <see cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteException(System.Exception,System.Exception)"/></description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteReflectionInfo(System.Exception)">
            <summary>
            Formats an <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> using reflection to get the information.
            </summary>
            <param name="exceptionToFormat">
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to be formatted.
            </param>
            <remarks>
            <para>This method reflects over the public, instance properties 
            and public, instance fields
            of the specified exception and prints them to the formatter.  
            Certain property names are ignored
            because they are handled explicitly in other places.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteDescription">
            <summary>
            When overridden by a class, writes a description of the caught exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            When overridden by a class, writes the current time.
            </summary>
            <param name="utcNow">The current time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            When overridden by a class, writes the <see cref="T:System.Type"/> of the current exception.
            </summary>
            <param name="exceptionType">The <see cref="T:System.Type"/> of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteMessage(System.String)">
            <summary>
            When overridden by a class, writes the <see cref="P:System.Exception.Message"/>.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            When overridden by a class, writes the value of the <see cref="P:System.Exception.StackTrace"/> property.
            </summary>
            <param name="stackTrace">The stack trace of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            When overridden by a class, writes the value of a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The reflected <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            When overridden by a class, writes the value of a <see cref="T:System.Reflection.FieldInfo"/> object.
            </summary>
            <param name="fieldInfo">The reflected <see cref="T:System.Reflection.FieldInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.FieldInfo"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.WriteAdditionalInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            When overridden by a class, writes additional properties if available.
            </summary>
            <param name="additionalInformation">Additional information to be included with the exception report</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception">
            <summary>
            Gets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to format.
            </summary>
            <value>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> to format.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.HandlingInstanceId">
            <summary>
            Gets the id of the handling chain requesting a formatting.
            </summary>
            <value>
            The id of the handling chain requesting a formatting, or <see cref="F:System.Guid.Empty"/> if no such id is available.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.AdditionalInfo">
            <summary>
            Gets additional information related to the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> but not
            stored in the exception (for example, the time in which the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> was 
            thrown).
            </summary>
            <value>
            Additional information related to the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> but not
            stored in the exception (for example, the time when the <see cref="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionFormatter.Exception"/> was 
            thrown).
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException">
            <summary>
            An exception that occurred during the exception handling process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor">
            <summary>
            Initializes with defaults.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor(System.String)">
            <summary>
            Initializes with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionHandlingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes with a specified error 
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
            <para>The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</para>
            </param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager">
            <summary>
            Non-static entry point to the exception handling functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String,System.Exception@)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <param name="exceptionToThrow">The new <see cref="T:System.Exception"/> to throw, if any.</param>
            <remarks>
            If a rethrow is recommended and <paramref name="exceptionToThrow"/> is <see langword="null"/>,
            then the original exception <paramref name="exceptionToHandle"/> should be rethrown; otherwise,
            the exception returned in <paramref name="exceptionToThrow"/> should be thrown.
            </remarks>
            <returns>
            Whether or not a rethrow is recommended. 
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
                Exception exceptionToThrow;
            	if (exceptionManager.HandleException(e, name, out exceptionToThrow))
            	{
            	  if(exceptionToThrow == null)
            	    throw;
            	  else
            	    throw exceptionToThrow;
            	}
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <returns>
            Whether or not a rethrow is recommended.
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
            	if (exceptionManager.HandleException(e, name)) throw;
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process(System.Action,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process(System.Action,System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/> and handles 
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <example>
            The following code shows the usage of this method.
            <code>
            	exceptionManager.Process(() =&gt; { DoWork(); }, "policy");
            </code>
            </example>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process``1(System.Func{``0},``0,System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/>, and handles
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <typeparam name="TResult">Type of return value from <paramref name="action"/>.</typeparam>
            <param name="action">The delegate to execute.</param>
            <param name="defaultResult">The value to return if an exception is thrown and the
            exception policy swallows it instead of rethrowing.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <returns>If no exception occurs, returns the result from executing <paramref name="action"/>. If
            an exception occurs and the policy does not re-throw, returns <paramref name="defaultResult"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManager.Process``1(System.Func{``0},System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/>, and handles
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <typeparam name="TResult">Type of return value from <paramref name="action"/>.</typeparam>
            <param name="action">The delegate to execute.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <returns>If no exception occurs, returns the result from executing <paramref name="action"/>. If
            an exception occurs and the policy does not re-throw, returns the default value for <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl">
            <summary>
            Non-static entry point to the exception handling functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl},Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> class with a set
            of exception policies.
            </summary>
            <param name="exceptionPolicies">The complete set of exception policies.</param>
            <param name="instrumentationProvider">Instrumentation provider used to report errors.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl})">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> with a set of policies
            and no instrumentation.
            </summary>
            <param name="exceptionPolicies">The complete set of exception policies.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.#ctor(System.Collections.Generic.IDictionary{System.String,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl},Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the class <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl"/> with a set of policies.
            </summary>
            <param name="exceptionPolicies">The complete set of exception policies.</param>
            <param name="instrumentationProvider">Instrumentation provider used to report errors.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <returns>
            Whether or not a rethrow is recommended.
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
            	if (exceptionManager.HandleException(e, name)) throw;
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.Process(System.Action,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String,System.Exception@)">
            <summary>
            Handles the specified <see cref="T:System.Exception"/>
            object according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="exceptionToHandle">An <see cref="T:System.Exception"/> object.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <param name="exceptionToThrow">The new <see cref="T:System.Exception"/> to throw, if any.</param>
            <remarks>
            If a rethrow is recommended and <paramref name="exceptionToThrow"/> is <see langword="null"/>,
            then the original exception <paramref name="exceptionToHandle"/> should be rethrown; otherwise,
            the exception returned in <paramref name="exceptionToThrow"/> should be thrown.
            </remarks>
            <returns>
            Whether or not a rethrow is recommended. 
            </returns>
            <example>
            The following code shows the usage of the 
            exception handling framework.
            <code>
            try
            {
            	DoWork();
            }
            catch (Exception e)
            {
                Exception exceptionToThrow;
            	if (exceptionManager.HandleException(e, name, out exceptionToThrow))
            	{
            	  if(exceptionToThrow == null)
            	    throw;
            	  else
            	    throw exceptionToThrow;
            	}
            }
            </code>
            </example>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.Process(System.Action,System.String)">
            <summary>
            Excecutes the supplied delegate <paramref name="action"/> and handles 
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="policyName">The name of the policy to handle.</param>        
            <example>
            The following code shows the usage of this method.
            <code>
            	exceptionManager.Process(() =&gt; { DoWork(); }, "policy");
            </code>
            </example>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.HandleException(System.Exception,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionManagerImpl.Process``1(System.Func{``0},``0,System.String)">
            <summary>
            Executes the supplied delegate <paramref name="action"/>, and handles
            any thrown exception according to the rules configured for <paramref name="policyName"/>.
            </summary>
            <typeparam name="TResult">Type of return value from <paramref name="action"/>.</typeparam>
            <param name="action">The delegate to execute.</param>
            <param name="defaultResult">The value to return if an exception is thrown and the
            exception policy swallows it instead of rethrowing.</param>
            <param name="policyName">The name of the policy to handle.</param>
            <returns>If no exception occurs, returns the result from executing <paramref name="action"/>. If
            an exception occurs and the policy does not re-throw, returns <paramref name="defaultResult"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry">
            <summary>
            Represents an entry in an exception policy containing
            an exception type as the key and a list of 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler"/> objects as the value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> class.
            </summary>
            <param name="exceptionType">Type of exception this policy refers to.</param>
            <param name="postHandlingAction">What to do after the exception is handled.</param>
            <param name="handlers">Handlers to execute on the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler},Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> class.
            </summary>
            <param name="exceptionType">Type of exception this policy refers to.</param>
            <param name="postHandlingAction">What to do after the exception is handled.</param>
            <param name="handlers">Handlers to execute on the exception.</param>
            <param name="instrumentationProvider">Instrumentation provider</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.Handle(System.Exception)">
            <summary>
            Handles all exceptions in the chain.
            </summary>
            <param name="exceptionToHandle">The <c>Exception</c> to handle.</param>
            <returns>Whether or not a rethrow is recommended.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.IntentionalRethrow(System.Exception,System.Exception)">
            <devdoc>
            Rethrows the given exception.  Placed in a separate method for
            easier viewing in the stack trace.
            </devdoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry.ExceptionType">
            <summary>
             The type of <see cref="T:System.Exception"/> to match this policy entry to.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl">
            <summary>
            Represents a policy for handling exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> class with the policy name and a set of policy entries.
            </summary>
            <param name="policyName">The policy name.</param>
            <param name="policyEntries">A set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.#ctor(System.String,System.Collections.Generic.IDictionary{System.Type,Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry})">
            
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl"/> class with the policy name and a dictionary of policy entries.
            </summary>
            <param name="policyName">The policy name.</param>
            <param name="policyEntries">A set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> objects.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.HandleException(System.Exception)">
            <summary>
            Checks if there is a policy entry that matches
            the type of the exception object specified by the
            <see cref="T:System.Exception"/> parameter
            and if so, invokes the handlers associated with that entry.
            </summary>
            <param name="exceptionToHandle">The <c>Exception</c> to handle.</param>
            <returns>Whether or not a rethrow is recommended.</returns>
            <remarks>
            The algorithm for matching the exception object to a 
            set of handlers mimics that of a standard .NET exception policy.
            The specified exception object will be matched to a single 
            exception policy entry by traversing its inheritance hierarchy. 
            This means that if a <c>FileNotFoundException</c>, for example, is 
            caught, but the only exception type that the exception policy 
            knows how to handle is System.Exception, the event handlers 
            for <c>System.Exception</c> will be invoked because 
            <c>FileNotFoundException</c> ultimately derives from <c>System.Exception</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.GetPolicyEntry(System.Type)">
            <summary>
            Gets the policy entry associated with the specified key.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyEntry"/> corresponding to this exception type.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.FindExceptionPolicyEntry(System.Type)">
            <devDoc>
            Traverses the specified type's inheritance hierarchy
            </devDoc>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl.PolicyName">
            <summary>
            Name of this exception policy.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility">
            <summary>
            Provides common functions for the Exception Handling Application Block classes. Cannot inherit from this class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility.FormatExceptionMessage(System.String,System.Guid)">
            <summary>
            Formats a message by replacing the token "{handlingInstanceID}" with the handlingInstanceID.
            </summary>
            <param name="message">The original message.</param>
            <param name="handlingInstanceId">The handlingInststanceID passed into the exceptionHandlerData.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionUtility.FormatExceptionHandlingExceptionMessage(System.String,System.Exception,System.Exception,System.Exception)">
            <summary>
            Formats an exception message so that it can be sent to the event log later, by someone else.
            </summary>
            <param name="policyName">The policy that is running.</param>
            <param name="offendingException">The exception that occurred in the chain.</param>
            <param name="chainException">The exception when the chain failed.</param>
            <param name="originalException">The original exception.</param>		
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler">
            <summary>
            Defines the contract for an ExceptionHandler.  An ExceptionHandler contains specific handling
            logic (that is, logging the exception, replacing the exception, and so forth.) that is executed in a chain of multiple
            ExceptionHandlers.  A chain of one or more ExceptionHandlers is executed based on the exception type being 
            handled.
            </summary>    
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.IExceptionHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            <para>When implemented by a class, handles an <see cref="T:System.Exception"/>.</para>
            </summary>
            <param name="exception"><para>The exception to handle.</para></param>        
            <param name="handlingInstanceId">
            <para>The unique ID attached to the handling chain for this handling instance.</para>
            </param>
            <returns><para>Modified exception to pass to the next exceptionHandlerData in the chain.</para></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider">
            <summary>
            Interface that defines the errors that can be reported when there's a fundamental
            problem with the Exception Handling Application Block.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String,System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred"/> event.
            </summary>
            <param name="policyName">The name of the policy involved with the error.</param>
            <param name="message">The message that describes the failure.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider">
            <summary>
            Interface defining the instrumentation events available from the Exception Handling
            Application Block.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandledEvent">
            <summary>
            Fires the ExceptionHandled event - reported when an exception is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandlerExecutedEvent">
            <summary>
            Fires the ExceptionHandlerExecuted - reported when an exception handler executes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred - reported when there's a problem handling an exception.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullDefaultExceptionHandlingInstrumentationProvider">
            <summary>
            A noop implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IDefaultExceptionHandlingInstrumentationProvider"/>
            that does nothing with the instrumentation events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullDefaultExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String,System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred"/> event.
            </summary>
            <param name="policyName">The name of the policy involved with the error.</param>
            <param name="message">The message that describes the failure.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider">
            <summary>
            An implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.IExceptionHandlingInstrumentationProvider"/> that
            does nothing; an implementation of the Null Object pattern for this interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider.FireExceptionHandledEvent">
            <summary>
            Fires the ExceptionHandled event - reported when an exception is handled.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider.FireExceptionHandlerExecutedEvent">
            <summary>
            Fires the ExceptionHandlerExecuted - reported when an exception handler executes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Instrumentation.NullExceptionHandlingInstrumentationProvider.FireExceptionHandlingErrorOccurred(System.String)">
            <summary>
            Fires the ExceptionHandlingErrorOccurred - reported when there's a problem handling an exception.
            </summary>
            <param name="errorMessage">The message that describes the failure.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that runs any exceptions returned from the
            target through the Exception Handling Application Block.
            </summary>
            <remarks>If the exception policy is configured to swallow exceptions,
            do not configure this call handler on a method with a non-void return value,
            as the handler doesn't know what value to return if the exception is swallowed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> that processes exceptions
            using the given exception policy.
            </summary>
            <param name="exceptionPolicy">Exception policy.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicyImpl,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> that processes exceptions
            using the given exception policy.
            </summary>
            <param name="exceptionPolicy">Exception policy.</param>
            <param name="order">Order in which the handler will be executed.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Processes the method call.
            </summary>
            <remarks>This handler does nothing before the call. If there is an exception
            returned, it runs the exception through the Exception Handling Application Block.</remarks>
            <param name="input"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> with information about the call.</param>
            <param name="getNext">delegate to call to get the next handler in the pipeline.</param>
            <returns>Return value from the target, or the (possibly changed) exceptions.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.ExceptionPolicy">
            <summary>
            Gets the exception policy used by this handler.
            </summary>
            <value>Exception policy.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute">
            <summary>
            An attribute used to apply the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandler"/> to the target.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute"/> using the given
            exception policy name.
            </summary>
            <remarks>When using this attribute, the exception policy is always read from
            the default configuration.</remarks>
            <param name="policyName">Exception policy name from configuration.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <returns>A new call handler object.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PolicyInjection.ExceptionCallHandlerAttribute.PolicyName">
            <summary>
            Get or sets the exception policy used by the handler.
            </summary>
            <value>exception policy name.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction">
            <summary>
            Determines what action should occur after an exception is handled by the configured exception handling chain. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction.None">
            <summary>
            Indicates that no rethrow should occur.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction.NotifyRethrow">
            <summary>
            Notify the caller that a rethrow is recommended.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.PostHandlingAction.ThrowNewException">
            <summary>
            Throws the exception after the exception has been handled by all handlers in the chain.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.AdditionalInfo">
            <summary>
              Looks up a localized string similar to Additional Info:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.CantSwallowNonVoidReturnMessage">
            <summary>
              Looks up a localized string similar to Cannot swallow exceptions for methods with non-null return type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ChainException">
            <summary>
              Looks up a localized string similar to HANDLING CHAIN EXCEPTION:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionNullException">
            <summary>
              Looks up a localized string similar to Unable to rethrow exception: The exception to throw is null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionPolicyNotFound">
            <summary>
              Looks up a localized string similar to The policy with name &apos;{0}&apos; cannot be found. Exception handling aborted..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionStringNullOrEmpty">
            <summary>
              Looks up a localized string similar to The value cannot be an empty string or null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionTypeNotException">
            <summary>
              Looks up a localized string similar to The type must be of type Exception..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.ExceptionWasCaught">
            <summary>
              Looks up a localized string similar to An exception of type &apos;{0}&apos; occurred and was caught..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.FieldAccessFailed">
            <summary>
              Looks up a localized string similar to Access failed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.InnerException">
            <summary>
              Looks up a localized string similar to Inner Exception.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.Message">
            <summary>
              Looks up a localized string similar to Message : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.OffendingException">
            <summary>
              Looks up a localized string similar to OFFENDING EXCEPTION:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.OriginalException">
            <summary>
              Looks up a localized string similar to ORIGINAL EXCEPTION:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PolicyName">
            <summary>
              Looks up a localized string similar to POLICY NAME: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.PropertyAccessFailed">
            <summary>
              Looks up a localized string similar to Access failed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.StackTrace">
            <summary>
              Looks up a localized string similar to Stack Trace.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.StackTraceUnavailable">
            <summary>
              Looks up a localized string similar to The stack trace is unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.TypeString">
            <summary>
              Looks up a localized string similar to Type : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.UnableToHandleException">
            <summary>
              Looks up a localized string similar to Unable to handle exception: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Properties.Resources.UndefinedValue">
            <summary>
              Looks up a localized string similar to &lt;undefined value&gt;.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler">
            <summary>
            Replaces the exception in the chain of handlers with a cleansed exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> class with an exception message and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessage">The exception message.</param>
            <param name="replaceExceptionType">The type of <see cref="T:System.Exception"/> to use to replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler"/> class with an exception message
            resolver and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessageResolver">The exception message resolver.</param>
            <param name="replaceExceptionType">The type of <see cref="T:System.Exception"/> to use to replace.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            Replaces the exception with the configured type for the specified policy.
            </summary>
            <param name="exception">The original exception.</param>        
            <param name="handlingInstanceId">The unique identifier attached to the handling chain for this handling instance.</param>
            <returns>Modified exception to pass to the next exceptionHandlerData in the chain.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.ReplaceException(System.String)">
            <summary>
            Replaces an exception with a new exception of a specified type.
            </summary>                
            <param name="replaceExceptionMessage">The message for the new exception.</param>
            <returns>The replaced or "cleansed" exception.  Returns null if unable to replace the exception.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.ReplaceExceptionType">
            <summary>
            The type of exception to replace.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ReplaceHandler.ExceptionMessage">
            <summary>
            Gets the message for the new exception.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter">
            <summary>
            Represents an exception formatter that formats exception objects as text.
            </summary>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter"/> using the specified
            <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Exception"/>
            objects.
            </summary>
            <param name="writer">The stream to write formatting information to.</param>
            <param name="exception">The exception to format.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter"/> using the specified
            <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Exception"/>
            objects.
            </summary>
            <param name="writer">The stream to write formatting information to.</param>
            <param name="exception">The exception to format.</param>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.Format">
            <summary>
            Formats the <see cref="T:System.Exception"/> into the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteDescription">
            <summary>
            Writes a generic description to the underlying text stream.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Writes and formats the exception and all nested inner exceptions to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="exceptionToFormat">The exception to format.</param>
            <param name="outerException">The outer exception. This 
            value will be null when writing the outer-most exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Writes the current date and time to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="utcNow">The current time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Writes the value of the <see cref="P:System.Type.AssemblyQualifiedName"/>
            property for the specified exception type to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="exceptionType">The <see cref="T:System.Type"/> of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Writes the value of the <see cref="P:System.Exception.Message"/>
            property to the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Writes the name and value of the specified property to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="propertyInfo">The reflected <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Writes the name and value of the specified field to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="fieldInfo">The reflected <see cref="T:System.Reflection.FieldInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.FieldInfo"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Writes the value of the <see cref="P:System.Exception.StackTrace"/> property to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="stackTrace">The stack trace of the exception.</param>
            <remarks>
            If there is no stack trace available, an appropriate message will be displayed.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.WriteAdditionalInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes the additional properties to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="additionalInformation">Additional information to be included with the exception report</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.Indent">
            <summary>
            Indents the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter.Writer">
            <summary>
            Gets the underlying <see cref="T:System.IO.TextWriter"/>
            that the current formatter is writing to.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler">
            <summary>
            Wraps the current exception in the handling chain with a new exception of a specified type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.#ctor(System.String,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> class with an exception message and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessage">The exception message.</param>
            <param name="wrapExceptionType">The type of <see cref="T:System.Exception"/> to use to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Utility.IStringResolver,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler"/> class with an exception message resolver
            and the type of <see cref="T:System.Exception"/> to use.
            </summary>
            <param name="exceptionMessageResolver">The exception message resolver.</param>
            <param name="wrapExceptionType">The type of <see cref="T:System.Exception"/> to use to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            <para>Wraps the <see cref="T:System.Exception"/> with the configuration exception type.</para>
            </summary>
            <param name="exception"><para>The exception to handle.</para></param>        
            <param name="handlingInstanceId">
            <para>The unique ID attached to the handling chain for this handling instance.</para>
            </param>
            <returns><para>Modified exception to pass to the next exceptionHandlerData in the chain.</para></returns>        
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.WrapExceptionType">
            <summary>
            <para>Gets the <see cref="T:System.Type"/> of exception to wrap the original exception with.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Type"/> of exception to wrap the original exception with.</para>
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler.WrapExceptionMessage">
            <summary>
            <para>Gets the message of the wrapped exception.</para>
            </summary>
            <value>
            <para>The message of the wrapped exception.</para>
            </value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter">
            <summary>
            Represents an exception formatter that formats exception objects as XML.
            </summary>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.#ctor(System.Xml.XmlWriter,System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter"/> class using the specified <see cref="T:System.Xml.XmlWriter"/> and <see cref="T:System.Exception"/> objects.
            </summary>
            <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter"/> in which to write the XML.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to format.</param>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.#ctor(System.IO.TextWriter,System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter"/> class using the specified <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.Exception"/> objects.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> in which to write the XML.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to format.</param>
            <remarks>
            An <see cref="T:System.Xml.XmlWriter"/> with indented formatting is created from the specified <see cref="T:System.IO.TextWriter"/>.
            </remarks>
            <param name="handlingInstanceId">The id of the handling chain.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.Format">
            <summary>
            Formats the <see cref="T:System.Exception"/> into the underlying stream.
            </summary>       
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteDateTime(System.DateTime)">
            <summary>
            Writes the current date and time to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="utcNow">The current time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteMessage(System.String)">
            <summary>
            Writes the value of the <see cref="P:System.Exception.Message"/> property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteDescription">
            <summary>
            Writes a generic description to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteStackTrace(System.String)">
            <summary>
            Writes the value of the specified stack trace taken from the value of the <see cref="P:System.Exception.StackTrace"/> property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="stackTrace">The stack trace of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteExceptionType(System.Type)">
            <summary>
            Writes the value of the <see cref="P:System.Type.AssemblyQualifiedName"/>
            property for the specified exception type to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="exceptionType">The <see cref="T:System.Type"/> of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteException(System.Exception,System.Exception)">
            <summary>
            Writes and formats the exception and all nested inner exceptions to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="exceptionToFormat">The exception to format.</param>
            <param name="outerException">The outer exception. This value will be null when writing the outer-most exception.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WritePropertyInfo(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Writes the name and value of the specified property to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="propertyInfo">The reflected <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteFieldInfo(System.Reflection.FieldInfo,System.Object)">
            <summary>
            Writes the name and value of the <see cref="T:System.Reflection.FieldInfo"/> object to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="fieldInfo">The reflected <see cref="T:System.Reflection.FieldInfo"/> object.</param>
            <param name="value">The value of the <see cref="T:System.Reflection.FieldInfo"/> object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.WriteAdditionalInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes additional information to the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="additionalInformation">Additional information to be included with the exception report</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.XmlExceptionFormatter.Writer">
            <summary>
            Gets the underlying <see cref="T:System.Xml.XmlWriter"/> that the formatted exception is written to.
            </summary>
            <value>
            The underlying <see cref="T:System.Xml.XmlWriter"/> that the formatted exception is written to.
            </value>
        </member>
    </members>
</doc>
